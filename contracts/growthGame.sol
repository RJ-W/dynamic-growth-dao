// SPDX-License-Identifier: MIT

// 1.Pragma
pragma solidity ^0.8.9;

// 2.Imports
import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";
import "hardhat/console.sol";

// üê∑ ÂàùÁâà‰∏çÂ§çÊùÇ 
// üê∑ 1.È¶ñÂÖàÊúâ‰∏Ä‰∏™Â≠òÈí±+ÂèñÈí±ÂäüËÉΩ fund+withdraw
// üê∑ 2.ÂÖ∂Ê¨°Êúâ‰∏Ä‰∏™È¢ÑÊµã+Âä†ÊùÉ+‰∫§Êòì+È™åËØÅ
	// üê∑ È¢ÑÊµã: ÊúÄÁÆÄÂçïÁöÑÊ∂®Ë∑åÈáè +3 -5 
		// üê∑ È¢ÑÊµãÂë®Êúü: 1Â∞èÊó∂ ÊèêÂâç15minÊà™Ê≠¢
		// üê∑ 10:00~11:00 È¢ÑÊµã12:00‰ª∑Ê†º
		// üê∑ 11:00~12:00 È¢ÑÊµã13:00‰ª∑Ê†º
	// üê∑ Âä†ÊùÉ: Ê†πÊçÆÂèÇ‰∏éÈ¢ÑÊµãwizardsÁöÑÂéÜÂè≤ËØÑ‰ª∑ Âä†ÊùÉÂæóÊúÄÁªàÁªìÊûú
		// üê∑ ‰ª•ÂéÜÂè≤ÂæóÂàÜ‰∏∫Ê¶ÇÁéáÈÄâprophet
		// üê∑ ÂèØ‰ª•ËÄÉËôëËÆ°ÁÆóÈÄâX‰∏™prophet ËÆ°ÁÆóÂÖ∂È¢ÑÊµãÁªìÊûúÁöÑÂùáÂÄº/ÊñπÂ∑Æ
		// üê∑ ÂèØ‰ª•ËÄÉËôëÂú®ÊñπÂ∑ÆËøáÂ§ßÊó∂ ÊîæÂºÉ‰∫§Êòì
	// üê∑ ‰∫§Êòì: Âì™‰∏™‰ª∑È´òÊç¢ÊàêÂì™‰∏™ USD/ETH/... 
		// üê∑ ÂÖ®ÈáèFund ËΩ¨Êç¢‰∏∫‰ª∑È´òÁöÑToken
		// üê∑ ‰∫§ÊòìÈòàÂÄº: È¢ÑÊµã‰∫∫Êï∞>=N Âä†ÊùÉÁªìÊûú>=+M Êàñ<=-M
		// üê∑ ‰∫§ÊòìÂë®Êúü: ÊØè1Â∞èÊó∂
		// üê∑ 11:00 Ê†πÊçÆÂØπ12:00ÁöÑÈ¢ÑÊµã ÂÆûÁé∞‰∫§Êòì
		// üê∑ 12:00 Ê†πÊçÆÂØπ13:00ÁöÑÈ¢ÑÊµã ÂÆûÁé∞‰∫§Êòì
	// üê∑ È™åËØÅ: Âú®T+1ÁúüÂÆû‰ª∑Ê†ºÂá∫Áé∞Âêé È™åËØÅT~T+1Êó∂ÊÆµÈ¢ÑÊµãÁöÑÂáÜÁ°ÆÊÄß
		// üê∑ È¢ÑÊµãÂÄºË∂äÊé•ËøëÁúüÂÆûÂÄº ÂæóÂàÜ Âèç‰πãÊâ£ÂàÜ Âπ∂ËÆ∞ÂΩï
		// üê∑ ËØÑ‰ª∑Âë®Êúü: ÊØè1Â∞èÊó∂
		// üê∑ 12:00 Â∑≤Ëé∑ÂèñÁúüÂÆû‰ª∑Ê†º ËØÑ‰ª∑10:00~11:00È¢ÑÊµãÁªìÊûú
		// üê∑ 13:00 Â∑≤Ëé∑ÂèñÁúüÂÆû‰ª∑Ê†º ËØÑ‰ª∑11:00~12:00È¢ÑÊµãÁªìÊûú
		// üê∑ ÁªôÂèÇ‰∏éÁöÑwizardsÊâìÂàÜ 
		// üê∑ ÂêåÁ¨¶Âè∑Êó∂ score += 1/(1+|diff|) ÊúÄÂ§ö+1 ÂÆåÂÖ®È¢ÑÊµãÂáÜ
		// üê∑ ÂºÇÁ¨¶Âè∑Êó∂ score -=  ÊúÄÂ§ö-1 diff->‚àû
	// üê∑ ‰∏æ‰æã: ÊúÄÂàùFund $1000USD
		// üê∑ 11:00Êó∂ Âõ†È¢ÑÊµã12:00Êó∂ETH/USD‰ºö+$5 Â∞ÜUSDÂÖ®ÈÉ®Êç¢‰∏∫ETH
		// üê∑ 12:00Êó∂ ÁªèÈ™åËØÅ ÁúüÂÆû+$6 ÁªôwizardsÊâìÂàÜ ÊÄªËµÑ‰∫ßÂèò‰∏∫$1006
		// üê∑ 12:00Êó∂ Âõ†È¢ÑÊµã13:00Êó∂ETH/USD‰ºö-$10 Â∞ÜETHÂÖ®ÈÉ®Êç¢‰∏∫USD
		// üê∑ 13:00Êó∂ ÁªèÈ™åËØÅ ÁúüÂÆû-$2 ÁªôwizardsÊâìÂàÜ ÊÄªËµÑ‰∫ß‰øùÊåÅ$1006
	// üê∑ ÂàÜÁ∫¢: ËÄÉËôë‰ª•Âç†ÊØîÂΩ¢ÂºèËÆ°ÁÆó ÊØèÊ¨°‰∫§ÊòìÂêåÊØî‰æãÊ∂®Ë∑å
		// üê∑ ‰ªÖÁî®Êà∑Â≠òÈí±+ÂèñÈí±Êó∂ËÆ°ÁÆó
		// üê∑ Â≠òÈí±Êó∂ ‰∏™‰∫∫new proportion = Â≠òÂÖ•fund/(Â≠òÂÖ•fund+Áé∞Êúâfund)
			// üê∑ ÂÖàÊõ¥Êñ∞ÂΩìÂâçÂÖ®ÈáèfunderËµÑ‰∫ßÂç†ÊØî
			// üê∑ ÂÜçÂ∞Ü‚ÄúÊñ∞ËµÑ‰∫ßÂç†ÊØî‚ÄùÂä†Âà∞ÂØπÂ∫îË¥¶Êà∑‰∏≠
			// üê∑ ËµÑ‰∫ßÁöÑ‰∏§ÁßçÂèòÂåñ: ‰∫§ÊòìÂèòÂåñ ËµÑÈáëÊ±†ÂèòÂåñ
				// üê∑ ‰∫§ÊòìÂèòÂåñ: Ê†πÊçÆÊØèÊ¨°‰∫§ÊòìÁõà‰∫èÊØî‰æã Êõ¥Êñ∞ÂêÑ‰∏™funderËµÑ‰∫ß
				// üê∑ ËµÑÈáëÊ±†ÂèòÂåñ: ‰ªÖËÆ∞ÂΩïÂêÑfunderËµÑÈáëÂç†ÊØî Âä†ÂÖ•/Êí§Âá∫Êó∂ ÊåâÂç†ÊØîËÆ°ÁÆó
			// üê∑ ËÄÉËôëÂà∞ÂêéÊúü‰∫§Êòì‰ºöÈÄêÊ∏êÂ§çÊùÇ ÈÄâÊã©Áî®‚ÄúËµÑÈáëÊ±†ÂèòÂåñ‚ÄùËÆ°ÁÆó
		// üê∑ ‰ª•Âç†ÊÄªfundÊØî‰æãÂ≠òÂú®
		// üê∑ ÂèñÈí±Êó∂ ÊåâËØ•ÊØî‰æãÊèêÊ¨æ 

// üê∑ ÂèØ‰ª•ÂÅö‰∏Ä‰∏™Ê®°ÊãüÂô®
// üê∑ Ëé∑ÂèñÁúüÂÆû‰∫§ÊòìÊï∞ÊçÆ Ê®°Êãü
// üê∑ 1.Ê®°ÊãüÂÖ®ÂëòËÉ°ÁåúÁöÑÂèòÂåñËøáÁ®ã
// üê∑ 2.Ê®°Êãü‰∏Ä‰∏™ÂÖàÁü•ÂèÇ‰∏éÁöÑÂèòÂåñËøáÁ®ã
// üê∑ 3.Ê®°ÊãüÂΩìÂâçÂ∑®È≤∏Âπ≥ÂùáÊî∂ÁõäÁéáÁöÑÂèòÂåñËøáÁ®ã
	// üê∑ Á≥ªÁªü‰∏≠ÊüêÂá†‰∏™Áî®Êà∑Êã•Êúâsmart money‚ÄúÂπ≥ÂùáÈ¢ÑÊµãÂáÜÁ°ÆÁéá‚Äù

// Add something from case Raffle
// 1.Build up a fund and allow people to invest
// 2.Pick up a weighted ramdom prophets --> Chainlink Randomess
// 3.Trade and verify every X minutes --> Chainlink Keeper
// 4.Allow people withdraw their money


// 3.Interfaces
// 4.Libraries
import "./PriceConverter.sol";

// Errors contractName__errorName
error GrowthGame__NotOwner();
error GrowthGame__LessthanFundThreshold();
error GrowthGame__NotEnoughBalance();

// 5.Contracts
/** 
 * @title growthGame Contract
 * @author RJ-W
 * @notice This contract is for finding out prophets from wizards through continuous predict game
 * @dev This price feeds from Chainlink
 */
contract growthGame {

	// 5.1 Type Declarations
	using PriceConverter for uint256;

	// 5.2 State variables
	// i_ immutable
	// s_ storage
	uint256 public immutable i_fundThreshold_usd18digit;
	address private immutable i_owner;

	struct FunderStruct {
		// üê∑ ÈÄÄÂá∫Êó∂ proportionÁΩÆ0 scoreÈïøÊúü‰øùÁïô O(1)Âà†Èô§List‰∏≠ËÆ∞ÂΩï Áª¥ÊåÅListÂ§ßÂ∞è ÊéßÂà∂ÈÅçÂéÜÊàêÊú¨
		uint256 proportion; 	// üê∑ ËµÑ‰∫ßÂç†ÊØî
		uint256 score; 			// üê∑ È¢ÑÊµãÁßØÂàÜ
		uint256 listPointer;	// üê∑ ÂàóË°®ÊåáÈíà
		// üê∑ Êñ∞Áî®Êà∑ Êó†ÂØπÂ∫îlistPointer
		// üê∑ ‰∏ãÁ∫øÁî®Êà∑ Structs‰∏éList‰∏≠ÁöÑaddress‰∏çÁõ∏Á≠â
		// üê∑ Âú®Á∫øÁî®Êà∑ Structs‰∏éList‰∏≠ÁöÑaddressÁõ∏Á≠â
	}

	address payable[] private s_fundersList;
	mapping(address => FunderStruct) private s_funderStructs;

	// address[] private s_wizards;
	// address[] private s_prophets;

	// uint256 private s_currentPrice;
	// mapping(address => int256) private s_addressToPrediction;
	// mapping(address => uint256) private s_addressToIntegration;
	AggregatorV3Interface private s_priceFeed;

	// 5.3 Events
	event fundSuccessfully(
		address indexed funder,
		uint256 indexed value
	);

	// 5.4 Errors
	// 5.5 Modifiers
	modifier onlyOwner() {
		// üê∑ require(msg.sender == i_owner);
		if (msg.sender != i_owner) revert GrowthGame__NotOwner();
		_;
	}

	// 5.6 Functions: constructor, receive, fallback, external, public, internal, private, view/pure
	constructor(address priceFeedAddress, uint256 fundThreshold) {
		s_priceFeed = AggregatorV3Interface(priceFeedAddress);
		i_owner = msg.sender;
		i_fundThreshold_usd18digit = fundThreshold * 10**18;

		// üê∑ init currentPrice
		// s_currentPrice = getCurrentPrice(s_priceFeed);
	}


	function isFunder(address funderAddress) private returns(bool isIndeed) {
		if(s_fundersList.length == 0) return false;
		return(s_fundersList[s_funderStructs[funderAddress].listPointer] == funderAddress);
	}

	/** 
	 * @notice visitor fund, then able to predict or get profit
	 * @dev spend more than fundThreshold(in USD)
	 */
	function fund() public payable {

		// üê∑ verify qualification
		if(msg.value.getConversionRate(s_priceFeed) < i_fundThreshold_usd18digit) {
			revert GrowthGame__LessthanFundThreshold();
		}

		console.log("address(this).balance: ", address(this).balance);
		// s_funders.push(payable(msg.sender));
		// s_fundersExist[msg.sender] = true;

		// üê∑ add to List and Structs
		// 1.Â∑≤ÁªèÂú®Á∫ø ËøΩÂä†ËµÑ‰∫ß ‰ªÖÊõ¥Êñ∞Structs
		// 2.‰∏ãÁ∫øÁä∂ÊÄÅ Ê∑ªÂä†ËµÑ‰∫ß Âä†ÂÖ•List + Êõ¥Êñ∞Structs
		// 3.Êñ∞Áî®Êà∑ Âä†ÂÖ•List + Âä†ÂÖ•Structs
		if(!isFunder(msg.sender)) {
			
		}
		

		// üê∑ update proportion
		// update all former account
		uint formerBalance = address(this).balance;
		
		// üê∑ add new proportion
		// s_addressToProportion[msg.sender] += msg.value / (formerBalance + msg.value);

		emit fundSuccessfully(
			msg.sender,
			msg.value
		);
	}

	/** 
	 * @notice allow funders with 
	 * @dev connect and trade with both Aave and CEX/DEX in the future
	 */
	function withdraw() public {

	}

	/** 
	 * @notice wizards predict the uplift of successor exchange rate between ETH and USD
	 * @dev init or update one's prediction
	 */
	/*
	function predict(int256 uplift) public {

		if(!(s_addressToBalance[msg.sender] > 0)) {
			revert GrowthGame__NotEnoughBalance();
		}

		s_addressToPrediction[msg.sender] = uplift;
		s_wizards.push(msg.sender);
	}
	*/

	/** 
	 * @notice owner operate the game
	 * @dev get the latest price, verify all prediction, and record
	 */
	/*
	function verify() public onlyOwner {
		uint256 latestPrice = getCurrentPrice(s_priceFeed);
		int256 realUplift = int256(latestPrice - s_currentPrice);

		for (uint256 index = 0; index < s_wizards.length; index++) {
			address wizard = s_wizards[index];

			uint256 diff = uint256(s_addressToPrediction[wizard] - realUplift);
			s_addressToIntegration[wizard] += (1 / diff);

			s_addressToPrediction[wizard] = 0;
		}

		s_wizards = new address[](0);
	}
	*/

	/** 
	 * @notice cheaper verify with variable in memory
	 * @dev mappings can't be in memory
	 */
	/*
	function cheaperVerify() public onlyOwner {
		uint256 latestPrice = getCurrentPrice(s_priceFeed);
		int256 realUplift = int256(latestPrice - s_currentPrice);

		address[] memory wizards = s_wizards;

		for (uint256 index = 0; index < wizards.length; index++) {
			address wizard = wizards[index];

			uint256 diff = uint256(s_addressToPrediction[wizard] - realUplift);
			s_addressToIntegration[wizard] += (1 / diff);

			s_addressToPrediction[wizard] = 0;
		}

		s_wizards = new address[](0);

	}
	*/

	/** 
	 * @notice prophets will stand out based on the integration records
	 * @dev elect prophets from wizards based on integration records with randomness
	 */
	function electProphets() public onlyOwner {

	}

	/** 
	 * @notice long or short ETH depends on prophets' prediction
	 * @dev connect and trade with both Aave and CEX/DEX in the future
	 */
	function trade() public onlyOwner {

	}

	/** 
	 * @notice distribute the profits or loss by a corporation to its shareholders
	 * @dev loop and traverse each account in s_addressToBalance in cheaper way
	 */
	function distribute() public onlyOwner {

	}


	function getOwner() public view returns (address) {
		return i_owner;
	}

	function getFundThreshold() public view returns (uint256) {
		return i_fundThreshold_usd18digit / 10**18;
	}

	function getFunderExist(address _address) public view returns (bool) {
		return s_fundersExist[_address];
	}

	function getCurrentPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {
		(, int256 answer, , , ) = priceFeed.latestRoundData();
		return uint256(answer);
	}

	function getPrediction() public view returns (int256) {
		int256 prediction = s_addressToPrediction[msg.sender];
		return prediction;
	}

	function getIntegration() public view returns (uint256) {
		uint256 integration = s_addressToIntegration[msg.sender];
		return integration;
	}

	function getPriceFeed() public view returns (AggregatorV3Interface) {
		return s_priceFeed;
	}
}